nametype MAXVARNUMBER = {0..11}
nametype BOOL = {0, 1} 
channel show : Int

datatype VarTypes = countFirstLine.{0..1} | countLastLine.{0..1} | findFirstBoxLeft.BOOL | findFirstBoxRight.BOOL | firstBoxLeft.{0..1} | firstBoxRight.{0..1} | lastBoxLeft.{0..1} | lastBoxRight.{0..1} | countForward.{0..11}

INIT_VAR = { (countFirstLine, 0), (countLastLine, 0), (findFirstBoxLeft, 0), (findFirstBoxRight, 0), (firstBoxLeft, 10), (firstBoxLeft, 10), (lastBoxLeft, 0), (lastBoxRight, 0) } 

-- read/write channel
channel getVar,setVar : VarTypes

--MEMORY TO VARIABLES
-- memory cell
McelVar(v,val) = getVar!v!val -> McelVar(v,val) 
              [] setVar!v?val_ -> McelVar(v,val_)

-- memory
MemoryVar(binding) = ||| (v,val) : binding @ McelVar(v,val)

MEMORY2 = MemoryVar(INIT_VAR)

--countLeft
PROCEDURE1() = 
    get.X?x -> 
    get.Y?y -> 
    get.ORIENTATION?o -> 
    get.BX?bx ->
    get.BY?by ->
     --Must I put here the 'gets' of all variables?
    getVar.findFirstBoxLeft?var1 ->
    getVar.countForward?var2 ->

    if(leftIsObstacle(x, y, o)) then (
       var1 <= 10 & setVar.countFirstLine!(var1-1)+1 -> 
        
        if(var1 != 1) then (
            var2 <= 10 & setVar.firstBoxLeft!var2 ->
            setVar.findFirstBoxLeft!1 -> SKIP            
        ) else (
            SKIP    
        ) ;

        var2 <= 10 & setVar.lastBoxLeft!var2 -> SKIP
    ) else (
        SKIP
    )
  

--countRight
PROCEDURE2() =
    get.X?x -> 
    get.Y?y -> 
    get.ORIENTATION?o -> 
    get.BX?bx ->
    get.BY?by ->
     --Must I put here the 'gets' of all variables?
    getVar.findFirstBoxRight?var1 ->
    getVar.countForward?var2 ->
   
    if(rightIsObstacle(x, y, o)) then (
        var1 <= 10 & setVar.countFirstLine!var1+1 ->
        
        if(var1 != 1) then (
            var2 <= 10 & setVar.firstBoxRight!var2 ->
            setVar.findFirstBoxRight!1 -> SKIP
        ) else (
            SKIP    
        ) ;
        var2 <= 10 & setVar.lastBoxRight!var2 -> SKIP
    ) else (
        SKIP
    )

--showsMoreBoxes
PROCEDURE3() = 
    getVar.countFirstLine?var1 ->
    getVar.countLastLine?var2 ->
    
    if(var1 > var2) then (
        show!1 ->
        show!(var1 - var2) -> SKIP
    ) else if(var1 < var2) then (
        show!2 ->
        show!(var1 - var2) -> SKIP
    ) else (
        show!3 ->
        show!(var1 - var2) -> SKIP
    )

--getBoxFirstLine
PROCEDURE4() = 
    getVar.firstBoxLeft?var1 ->
    getVar.firstBoxRight?var2 ->

    if(var1 > var2) then (
        show!1 -> SKIP
    ) else if(var1 > var2) then (
        show!2 -> SKIP
    ) else (
        show!3 -> SKIP
    )

--program
COMMANDS =
    RIGHT
    ;
    (let
        WHILE =
            get.X?x -> 
            get.Y?y -> 
            get.ORIENTATION?o -> 
            get.BX?bx ->
            get.BY?by ->
            getVar.countForward?var1->
            if(frontIsClear(x,y,o,bx,by)) then (
                PROCEDURE1() ;
                PROCEDURE2() ;
                FORWARD(1) ;
                var1 <= 10 & setVar.countForward!(var1+1) -> SKIP ; SKIP
            ) else (
                SKIP 
            )
        within
            WHILE
    ) 
    ;  --tera uma tabela de simbolos no spoofax - contexto  
    PROCEDURE1() ;
    PROCEDURE2() ;
    getVar.countFirstLine?var1 -> 
    getVar.countLastLine?var2 ->
    show!(var1) -> 
    show!(var2) -> SKIP ;
    PROCEDURE3() ;
    PROCEDURE4() ; SKIP
 